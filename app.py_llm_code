from langchain_community.vectorstores import Qdrant
from langchain_community.embeddings import HuggingFaceBgeEmbeddings
from qdrant_client import QdrantClient
import cohere

# Cohere API Key
cohere_api_key = 'fCPIGCn7FFcmymOzCjUBcCpRKh0S0nh2QLi3PFWy'

# Initialize Cohere client
co = cohere.Client(cohere_api_key)

model_name = "BAAI/bge-large-en"
model_kwargs = {'device': 'cpu'}
encode_kwargs = {'normalize_embeddings': False}

embeddings = HuggingFaceBgeEmbeddings(
    model_name=model_name,
    model_kwargs=model_kwargs,
    encode_kwargs=encode_kwargs
)

url = "http://localhost:6333"
collection_name = "test"

client = QdrantClient(
    url=url,
    prefer_grpc=False
)

print(client)
print("######################")

db = Qdrant(
    client=client,
    embeddings=embeddings,
    collection_name=collection_name
)

print(db)
print("######################")

query = "What is RAC in oracle database"
docs = db.similarity_search_with_score(query=query, k=1)

# Function to call Cohere API with retries
def generate_response(query, doc_content):
    try:
        response = co.generate(
            model='command-xlarge-nightly',  # Use the appropriate model name
            prompt=f"User query: {query}\nRelevant documents: {doc_content}\nProvide a helpful response:",
            max_tokens=150
        )
        return response.generations[0].text.strip()
    except cohere.core.api_error.ApiError as e:  # Correctly handle Cohere API errors
        print(f"An error occurred: {e}")
        return None

# Extract doc_content from the query result
if isinstance(docs, tuple) and len(docs) > 0:
    doc_content = docs[0]['document']
else:
    doc_content = ""

generated_response = generate_response(query, doc_content)

if generated_response:
    print("Generated Response:", generated_response)
else:
    print("Failed to generate a response.")
